---
layout: post
title:  "Chats Lunaires: Le P√©riple, deuxi√®me partie"
date:   2021-03-31 08:00:00 +0200
permalink: mooncatpartii
categories: NFT mooncats etherscan smartcontracts
---

![un Chat Lunaire]({{site.baseurl}}/assets/img/mooncat_rarible.png){: width="96" }
Lors de notre [pr√©c√©dante exploration]({{ site.baseurl }}/mooncatparti), nous avions vu comment √©tait g√©n√©r√© un Chat Lunaire. A pr√©sent voyons comment fonctionne un _wrapper_, qui annonce emballer notre chat, le normaliser en NFT ERC721... Alors que la r√©alit√© est toute autre ! Il veut le cryog√©niser et le cloner ! Voyez plus bas, la suite va vous √©tonner !

## Le NFT ERC721
Avant d'entrer un peu plus dans les d√©tails du wrapper, attardons-nous sur ce qu'est un ERC721, puisqu'il va cr√©er un token de type ERC721 √† partir d'un MoonCat.  
Traduisons l'introduction de cette [norme](https://eips.ethereum.org/EIPS/eip-721) : "_Le standard suivant permet l'impl√©mentation d'une API standard au sein des smart contracts. Ce standard fournit des fonctionnalit√©s de base pour traquer et transf√©rer des NFT._"  
Cette norme permet donc de d√©finir des des NFT standardis√©s, simplifiant les √©changes sur les places de march√© telles que [Opensea](https://opensea.io/assets/wrapped-mooncatsrescue) et [Rarible](https://rarible.com/collection/0x7c40c393dc0f283f318791d746d894ddd3693572),  √† travers la d√©finition de [m√©thodes et attributs](https://fr.wikipedia.org/wiki/Programmation_orient%C3%A9e_objet#Objet_(attributs_et_m%C3%A9thodes)) g√©n√©riques. Si l'objet est conforme, il est √©galement visible dans le wallet depuis etherscan :  
![]({{site.baseurl}}/assets/img/mooncat_etherscan_tab_erc721.png)  
Mais revenons √† notre _wrapper_, dont la t√¢che sera de "dresser" les Chats Lunaires selon la norme ERC721, tout en en conservant leurs attributs. Je mets le verbe "dresser" entre guillemets, car tout amateur de Chat qui se respecte est bien conscient qu'un Chat ne se laissera jamais "dresser". Surtout s'il est issu d'un smart contract sauvage...

## Le wrapper
 
Avant de commencer, rappelons-nous la proc√©dure de JR_Kunz pour [wrapper les MoonCats](https://twitter.com/RJ_Kunz/status/1370508875598807041) √©voqu√© dans notre [premier billet]({{ site.baseurl }}/mooncatintro). Traduction libre :
1. Activer dans le contrat sur la page etherscan de [MoonCatsRescue](https://etherscan.io/address/0x60cd862c9C687A9dE49aecdC3A99b74A4fc54aB6#writeContract) 12. makeAdoptionOffer, avec comme param√®tre le `catId` et l'adresse du contrat du _wrapper_,
2. Activer la fonction `wrap()` du _[wrapper](https://etherscan.io/address/0x7c40c393dc0f283f318791d746d894ddd3693572#writeContract)_ le `catId`

√âtudions √† pr√©sent un extrait de code de [Smart Contract MoonCatsWrapped](https://etherscan.io/address/0x7c40c393dc0f283f318791d746d894ddd3693572#code) √† partir de la ligne 1800, soit la ligne 1 de notre extrait.
{% highlight solidity linenos %}
contract MoonCatsWrapped is ERC721 {

    using Counters for Counters.Counter;
    Counters.Counter private _tokenIdTracker;

    MoonCatsRescue public _moonCats = MoonCatsRescue(0x60cd862c9C687A9dE49aecdC3A99b74A4fc54aB6);

    mapping(bytes5 => uint) public _catIDToTokenID; // dictionnaire (hash) convertissant catID vers ID ERC721
    mapping(uint => bytes5) public  _tokenIDToCatID; // dictionnaire de ID ERC721 vers catID
    string private _baseTokenURI;
    address public _owner = 0xD2927a91570146218eD700566DF516d67C5ECFAB;


    event Wrapped(bytes5 indexed catId, uint tokenID);
    event Unwrapped(bytes5 indexed catId, uint tokenID);

    constructor() ERC721("Wrapped MoonCatsRescue", "WMCR") {}

    function setBaseURI(string memory _newBaseURI) public {
        require(_msgSender() == _owner);
        _baseTokenURI = _newBaseURI;
    }

    function renounceOwnership() public {
        require(_msgSender() == _owner);
        _owner = address(0x0);
    }


    function _baseURI() public view virtual returns (string memory) {
        return _baseTokenURI;
    }


    function wrap(bytes5 catId) public {
        MoonCatsRescue.AdoptionOffer memory offer = _moonCats.adoptionOffers(catId);
        require(offer.seller == _msgSender()); //seul le propri√©taire peut emballer son Chat
        _moonCats.acceptAdoptionOffer(catId);


        //V√©rifie si le chat n'est pas d√©j√† emball√©
        uint tokenID = _catIDToTokenID[catId];
        uint tokenIDToAssign = tokenID;

        if (tokenID == 0) {
            tokenIDToAssign = _tokenIdTracker.current();
            _tokenIdTracker.increment();
            _catIDToTokenID[catId] = tokenIDToAssign;
            _tokenIDToCatID[tokenIDToAssign] = catId;
        }
        _mint(_msgSender(), tokenIDToAssign);
        emit Wrapped(catId, tokenIDToAssign);

    }

    function unwrap(uint256 tokenID) public {
        bytes5 catId = _tokenIDToCatID[tokenID];
        address owner = ownerOf(tokenID);
        require(owner == _msgSender()); //seul le propri√©taire peut d√©baller son chat
        _moonCats.giveCat(catId, owner);
        _burn(tokenID); // on br√ªle le chat ERC721 üî•üòøüî•
        emit Unwrapped(catId, tokenID); // on d√©g√®le le Chat initial ‚ùÑÔ∏è
    }

}
{% endhighlight %}

### wrap()
* Ligne 1 : la classe h√©rite de ERC721, classe de base d√©crite ligne 1321 et suivantes, h√©ritant elle-m√™me de plusieurs classes.
* Ligne 6 : r√©cup√©ration du contrat `MoonCatsRescue` dans `_moonCats`, le Contrat Fondateur des Chats Lunaires, afin de pouvoir agir avec lui.
* Ligne 35 : `function wrap(bytes5 catId) public` : c'est dans cette fonction que l'essentiel se passe !
  * Ligne 36 : r√©cup√®re (l'innocente) offre d'adoption de l'autre contrat.
  * Ligne 38 : Le Chat est adopt√© par le contrat _wrapper_ et ne pourra en sortir uniquement lorsque la fonction `unwrap()` sera appel√©e. Le Chat est donc _Freezed_, ce qui justifie le chapeau accrocheur de cet article :-)
  * Lignes 46 √† 48 : assignation d'un num√©ro unique au Chat √† emballer (c'est un compteur incr√©ment√© ligne 47). C'est donc ici qu'est construite une table de correspondance entre un `catID` et le tokenID qui lui est associ√© lors du _wrap_ en ERC721.
  * Ligne 49 : on r√©cup√®re l'ADN du chat (son `catId`).
Ouvrons une parenth√®se sur la question de l'ADN du Chat. La place nous manque pour tout analyser dans le d√©tail, basons-nous sur ces [deux](https://www.reddit.com/r/MoonCatRescue/comments/6tkdl0/developer_analysis_of_mooncat_contract/) [sources](https://www.reddit.com/r/MoonCatRescue/comments/m4gazs/mooncat_k_values_explained/) ;  le catID d'un Chat "normal" se d√©compose de la mani√®re suivante : `0x00ddrrvvbb` o√π :
    * `0x00` est le pr√©fixe (h√©xad√©cimal, 00). Il en existe des diff√©rents, les genesis, sortes d'albinos qui devaient revenir aux cr√©ateurs mais dont beaucoup ont √©t√© perdus... Mais c'est une autre histoire.
    * `dd` l'aspect g√©n√©ral du Chat : 
![]({{ site.baseurl }}/assets/img/mooncat_kval.jpg)  
([source](https://www.reddit.com/r/MoonCatRescue/comments/m4gazs/mooncat_k_values_explained/))  
    * `rrvvbb` la couleur de sa robe en rvb.
  * Lignes 51 et 52, le token ERC721 est forg√©, et l'information est envoy√©e sur la blockchain.

Exemple de [transaction](https://etherscan.io/tx/0xc1777250b8731637bccf8a47503006aab29049a53f6416580fb172ed367e4b01). L'onglet ([Logs](https://etherscan.io/tx/0xc1777250b8731637bccf8a47503006aab29049a53f6416580fb172ed367e4b01#eventlog)) permet de voir les param√®tres utilis√©s, en particulier l'initiateur de la transaction, le `catID` et le `tokenID` correspondant qui lui assign√©.

Dans le wallet du contrat de [wrap](https://etherscan.io/tokenholdings?a=0x7C40c393DC0f283F318791d746d894DdD3693572), nous pouvons observer les Chats cryog√©nis√©s (c√†d gel√©s dans le compte du contrat jusqu'√† l'appel d'un `unwrap()`)
![]({{ site.baseurl }}/assets/img/mooncat_etherscan_view_erc20.png)  

### unwrap()
* Ligne 56 : `function unwrap(uint256 tokenID) public` : op√©ration inverse, on d√©cong√®le le Chat.
* Ligne 60 : Interaction avec le smart contract `MoonCatsRescue` pour remettre le Chat original √† son propri√©taire.
* Ligne 61 : `_burn(tokenID)` : le token repr√©sentant le Wrapped MoonCatsRescue. La chaleur d√©gag√©e d√©g√®le le Chat pr√©c√©demment cryog√©nis√©, le Chat original est pr√™t √† √™tre √©mis.  
* Ligne 62 : √âmission sur la blockchain de l'ensemble la transaction d'unwrap.  

Exemple de [transaction](https://etherscan.io/tx/0x2c6fc69c46d4afe651ee86b0360704b6422a5602ef1d891eefaf0bc417a66199). Pour retrouver l'appel √† `unwrap` et conna√Ætre les param√®tres TokenID et catID, voir en bas de page de l'onglet Logs(5).

## Remonter l'historique d'un Chat
A partir d'un wallet poss√©dant un Chat (par exemple sur [Rarible](https://rarible.com/collection/0x7c40c393dc0f283f318791d746d894ddd3693572)) ou [Opensea](https://opensea.io/assets/wrapped-mooncatsrescue), nous pouvons remonter l'historique, √† l'aide d'etherscan. Nous pouvons √©galement r√©cup√©rer son TokenID et interroger le [contrat](https://etherscan.io/address/0x7c40c393dc0f283f318791d746d894ddd3693572#readContract) ; fonctions 5 et 11 par exemple.  
![]({{ site.baseurl }}/assets/img/mooncat_rarible.png)  
Ici le `7519`. Si √† partir du TokenID nous pouvons obtenir le catId, nous pouvons aussi aller glaner des informations sur le contrat [mooncatrescue](https://etherscan.io/address/0x60cd862c9C687A9dE49aecdC3A99b74A4fc54aB6#readContract) (attention √† la pr√©sentation des valeurs ; le TokenID est un uint256, donc un entier non sign√©, alors que le catId, un bytes5, doit √™tre pr√©fix√© de `0x`)


## Aller plus loin (en anglais)
* Un excellent article sur le frontrunning exploitant une faille dans le process d'adoption de Chat sur [reddit](https://www.reddit.com/r/MoonCatRescue/comments/m5qjeg/frontrunning_a_primer/).
* Analyse du smart contract pour les devs sur [reddit]({{ site.baseurl }}/ressources/mooncats#developer-analysis-of-mooncat-contract) 
* Statistiques de types de Chats ayant √©t√© g√©n√©r√©s [reddit](https://www.reddit.com/r/MoonCatRescue/comments/m3t7nv/mooncat_numbersrarities/)
* [The Non-Fungible Token Bible](https://opensea.io/blog/guides/non-fungible-tokens/)
* Un thread tr√®s complet √† √®rp√®ps des NFT sur [twitter](https://twitter.com/minionabct/status/1364199356245495808)

